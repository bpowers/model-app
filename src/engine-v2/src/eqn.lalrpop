use sd::common;
use sd::ast::Op2::*;
use sd::ast::Op1::*;
use sd::ast::Expr;
use sd::ast::Expr::*;
use sd::tok::{self, Tok};

#[LALR]
grammar<'input>(text: &'input str);

pub Program: Box<Expr> = {
    Expr,
};

Expr: Box<Expr> = {
    "if" <c:Expr> "then" <t:Expr> "else" <f:Expr>    => Box::new(If(c, t, f)),
    LCmp,
};

LCmp: Box<Expr> = {
    <l:ACmp> "&&" <r:LCmp> => Box::new(Op2(And, l, r)),
    <l:ACmp> "||" <r:LCmp> => Box::new(Op2(Or, l, r)),
    ACmp,
};

ACmp: Box<Expr> = {
    <l:Eq> "=" <r:ACmp>  => Box::new(Op2(Eq, l, r)),
    <l:Eq> "<>" <r:ACmp>  => Box::new(Op2(Neq, l, r)),
};

Eq: Box<Expr> = {
    <l:Add> "<" <r:Eq>  => Box::new(Op2(Lt, l, r)),
    <l:Add> "<=" <r:Eq> => Box::new(Op2(Lte, l, r)),
    <l:Add> ">" <r:Eq>  => Box::new(Op2(Gt, l, r)),
    <l:Add> ">=" <r:Eq> => Box::new(Op2(Gte, l, r)),
    Add,
};

Add: Box<Expr> = {
    <l:Mul> "-" <r:Add> => Box::new(Op2(Sub, l, r)),
    <l:Mul> "+" <r:Add> => Box::new(Op2(Add, l, r)),
    Mul,
};

Mul: Box<Expr> = {
    <l:Mul> "*" <r:Unary> => Box::new(Op2(Mul, l, r)),
    <l:Mul> "/" <r:Unary> => Box::new(Op2(Div, l, r)),
    Unary,
};

Unary: Box<Expr> = {
    "+" <e:Exp> => Box::new(Op1(Positive, e)),
    "-" <e:Exp> => Box::new(Op1(Negative, e)),
    "!" <e:Exp> => Box::new(Op1(Not, e)),
    Exp,
};

Exp: Box<Expr> = {
    <l:Exp> "^" <r:App> => Box::new(Op2(Exp, l, r)),
    App,
};

App: Box<Expr> = {
    <id:Ident> "(" <a:Add> "," <b:Add> ")" => Box::new(App(id, vec!(a, b))), // FIXME
    Atom,
};

Atom: Box<Expr> = {
    <id:Ident>    => Box::new(Var(id)),
    "(" <Exprs> ")",
    Int,
};

Exprs: Box<Expr> = {
    Expr,
};

Int: Box<Expr> = {
    Num => Box::new(Const(<> as f64)),
};

Ident: common::Ident = {
    <id:"Iden"> => String::from(id),
};

Num: i64 = {
    "Num",
};

extern {
    type Location = usize;
    type Error = tok::Error;
    enum Tok<'input> {
        "if" => Tok::If,
        "then" => Tok::Then,
        "else" => Tok::Else,
        "," => Tok::Comma,
        "=" => Tok::Eq,
        "<>" => Tok::Neq,
        "<" => Tok::Lt,
        "<=" => Tok::Lte,
        ">" => Tok::Gt,
        ">=" => Tok::Gte,
        "+" => Tok::Plus,
        "-" => Tok::Minus,
        "*" => Tok::Mul,
        "/" => Tok::Div,
        "!" => Tok::Not,
        "(" => Tok::LParen,
        ")" => Tok::RParen,
        "[" => Tok::LBracket,
        "]" => Tok::RBracket,
        "^" => Tok::Exp,
        "&&" => Tok::And,
        "||" => Tok::Or,

        "Iden" => Tok::Ident(<&'input str>),
        "Num" => Tok::Num(<i64>),
    }
}
