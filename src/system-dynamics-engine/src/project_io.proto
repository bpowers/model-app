// Copyright 2020 The Model Authors. All rights reserved.
// Use of this source code is governed by the Apache License,
// Version 2.0, that can be found in the LICENSE file.

syntax = "proto3";

package project_io;

message GraphicalFunction {
  enum Kind {
    CONTINUOUS = 0;
    DISCRETE = 1;
    EXTRAPOLATE = 2;
  };
  message Scale {
    double min = 1;
    double max = 2;
  }
  Kind kind = 1;
  repeated double xPoints = 2;
  repeated double yPoints = 3;
  Scale xScale = 4;
  Scale yScale = 5;
}

message Variable {
  message Stock {
    string ident = 1;
    string equation = 2;
    string documentation = 3;
    string units = 4;
    repeated string inflows = 5;
    repeated string outflows = 6;
    bool non_negative = 7;
    // dimensions
  };

  message Flow {
    string ident = 1;
    string equation = 2;
    string documentation = 3;
    string units = 4;
    GraphicalFunction gf = 5;
    bool non_negative = 7;
    // dimensions
  };

  message Aux {
    string ident = 1;
    string equation = 2;
    string documentation = 3;
    string units = 4;
    GraphicalFunction gf = 5;
    // dimensions
  };

  message Module {
    message Reference {
      string src = 1;
      string dst = 2;
    };

    string ident = 1;
    string model_name = 2;
    string documentation = 3;
    string units = 4;
    repeated Reference references = 5;
  };

  oneof v {
    Stock stock = 1;
    Flow flow = 2;
    Aux aux = 3;
    Module module = 4;
  }
};

message ViewElement {
  enum LabelSide {
    TOP = 0;
    LEFT = 1;
    CENTER = 2;
    BOTTOM = 3;
    RIGHT = 4;
  };

  message Aux {
    string name = 1;
    int32 uid = 2;
    double x = 3;
    double y = 4;
    LabelSide label_side = 5;
  };

  message Stock {
    string name = 1;
    int32 uid = 2;
    double x = 3;
    double y = 4;
    LabelSide label_side = 5;
  };

  message FlowPoint {
    double x = 1;
    double y = 2;
    optional int32 attachedToUid = 3;
  }

  message Flow {
    string name = 1;
    int32 uid = 2;
    double x = 3;
    double y = 4;
    LabelSide labelSide = 5;
    // int32 segmentWithAux = 3;
    // double auxPercentageIntoSegment = 4;
    repeated FlowPoint points = 6;
  };

  message Link {
    message LinkPoints {
      repeated FlowPoint points = 1;
    }
    int32 uid = 1;
    int32 fromUid = 2;
    int32 toUid = 3;
    oneof shape {
      double arc = 4; // [0, 360)
      bool isStraight = 5;
      LinkPoints multiPoint = 6;
    }
  };

  message Module {
    string name = 1;
    int32 uid = 2;
    double x = 3;
    double y = 4;
    LabelSide label_side = 5;
  };

  message Alias {
    int32 uid = 1;
    int32 aliasOfUid = 2;
    double x = 3;
    double y = 4;
    LabelSide label_side = 5;
  };

  message Cloud {
    int32 uid = 1;
    int32 flowUid = 2;
    double x = 3;
    double y = 4;
  };

  oneof element {
    Aux aux = 1;
    Stock stock = 2;
    Flow flow = 3;
    Link link = 4;
    Module module = 5;
    Alias alias = 6;
    Cloud cloud = 7;
  }
}

message View {
  enum ViewType {
    STOCK_FLOW = 0;
    // INTERFACE = 1;
    // POPUP = 2;
    // VENDOR_SPECIFIC = 3;
  };

  ViewType kind = 1;
  // background
  repeated ViewElement elements = 3;
};

message Model {
  string name = 1;
  // namespaces
  // no 'resource' or sim_specs in our normalized form
  repeated Variable variables = 3;
  repeated View views = 4;
}

enum SimMethod {
  EULER = 0;
  RUNGE_KUTTA_4 = 1;
}

message Dt {
  double value = 1;
  bool isReciprocal = 2;
}

message SimSpecs {
  double start = 1;
  double stop = 2;
  Dt dt = 3;
  optional Dt saveStep = 4;
  SimMethod simMethod = 5;
  optional string timeUnits = 6;
};

message Project {
  string name = 1;
  SimSpecs simSpecs = 2;
  repeated Model models = 3;
};
